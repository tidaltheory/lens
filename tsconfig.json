{
  // see https://www.typescriptlang.org/tsconfig to better understand tsconfigs
  "compilerOptions": {
    "allowSyntheticDefaultImports": true,

    // output .d.ts declaration files for consumers
    "declaration": true,
    // interop between ESM and CJS modules. Recommended by TS
    "esModuleInterop": true,
    // error out if import and file system have a casing mismatch. Recommended by TS
    "forceConsistentCasingInFileNames": true,

    "importHelpers": true,
    "lib": ["dom", "esnext"],
    "module": "esnext",

    // use Node's module resolution algorithm, instead of the legacy TS one
    "moduleResolution": "node",
    // `tsdx build` ignores this option, but it is commonly used when type-checking separately with `tsc`
    "noEmit": true,
    // linter checks for common issues
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    // noUnused* overlap with @typescript-eslint/no-unused-vars, can disable if duplicative
    "noUnusedLocals": true,
    "noUnusedParameters": true,

    "resolveJsonModule": false,

    // match output dir to input dir. e.g. dist/index instead of dist/src/index
    "rootDir": "./src",
    // significant perf increase by skipping checking .d.ts files, particularly those in node_modules. Recommended by TS
    "skipLibCheck": true,
    // output .js.map sourcemap files for consumers
    "sourceMap": true,
    // stricter type-checking for stronger correctness. Recommended by TS
    "strict": true
  },
  "include": ["src", "types"]
}
